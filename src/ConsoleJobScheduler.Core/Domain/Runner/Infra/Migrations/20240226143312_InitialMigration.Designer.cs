// <auto-generated />
using System;
using ConsoleJobScheduler.Core.Domain.Runner.Infra;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace ConsoleJobScheduler.Core.Domain.Runner.Infra.Migrations
{
    [DbContext(typeof(RunnerDbContext))]
    [Migration("20240226143312_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ConsoleJobScheduler.Core.Domain.Runner.Model.JobPackage", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("Arguments")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("arguments");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("author");

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("description");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(1024)
                        .HasColumnType("character varying(1024)")
                        .HasColumnName("file_name");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("version");

                    b.HasKey("Name");

                    b.ToTable("qrtz_packages", (string)null);
                });

            modelBuilder.Entity("ConsoleJobScheduler.Core.Domain.Runner.Model.JobRunAttachment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<byte[]>("Content")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("content");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)")
                        .HasColumnName("content_type");

                    b.Property<string>("CreateDate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("create_time");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<Guid?>("EmailId")
                        .HasColumnType("uuid")
                        .HasColumnName("email_id");

                    b.Property<string>("FileContent")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("name");

                    b.Property<string>("JobRunId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("job_run_id");

                    b.HasKey("Id");

                    b.HasIndex("JobRunId")
                        .HasDatabaseName("idx_qrtz_job_run_attachment_job_run_id");

                    b.ToTable("qrtz_job_run_attachment", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("JobRunAttachment");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("ConsoleJobScheduler.Core.Domain.Runner.Model.JobRunEmail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Bcc")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_bcc");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("body");

                    b.Property<string>("CC")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_cc");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<bool>("IsSent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_sent");

                    b.Property<string>("JobRunId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("job_run_id");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)")
                        .HasColumnName("subject");

                    b.Property<string>("To")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("message_to");

                    b.HasKey("Id");

                    b.HasIndex("JobRunId")
                        .HasDatabaseName("idx_qrtz_job_run_email_job_run_id");

                    b.ToTable("qrtz_job_run_email", (string)null);
                });

            modelBuilder.Entity("ConsoleJobScheduler.Core.Domain.Runner.Model.JobRunLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("content");

                    b.Property<DateTime>("CreateDate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("create_time");

                    b.Property<bool>("IsError")
                        .HasColumnType("boolean")
                        .HasColumnName("is_error");

                    b.Property<string>("JobRunId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("job_run_id");

                    b.HasKey("Id");

                    b.HasIndex("JobRunId")
                        .HasDatabaseName("idx_qrtz_job_run_log_job_run_id");

                    b.ToTable("qrtz_job_run_log", (string)null);
                });

            modelBuilder.Entity("ConsoleJobScheduler.Core.Domain.Runner.Model.JobRunEmailAttachment", b =>
                {
                    b.HasBaseType("ConsoleJobScheduler.Core.Domain.Runner.Model.JobRunAttachment");

                    b.HasIndex("EmailId");

                    b.HasDiscriminator().HasValue("JobRunEmailAttachment");
                });

            modelBuilder.Entity("ConsoleJobScheduler.Core.Domain.Runner.Model.JobRunEmailAttachment", b =>
                {
                    b.HasOne("ConsoleJobScheduler.Core.Domain.Runner.Model.JobRunEmail", "JobRunEmail")
                        .WithMany("Attachments")
                        .HasForeignKey("EmailId");

                    b.Navigation("JobRunEmail");
                });

            modelBuilder.Entity("ConsoleJobScheduler.Core.Domain.Runner.Model.JobRunEmail", b =>
                {
                    b.Navigation("Attachments");
                });
#pragma warning restore 612, 618
        }
    }
}
