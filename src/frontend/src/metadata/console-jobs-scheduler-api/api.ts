/* tslint:disable */
/* eslint-disable */
/**
 * ConsoleJobScheduler.Service
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AttachmentInfoModel
 */
export interface AttachmentInfoModel {
    /**
     * 
     * @type {number}
     * @memberof AttachmentInfoModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof AttachmentInfoModel
     */
    'fileName'?: string | null;
}
/**
 * 
 * @export
 * @interface GeneralSettings
 */
export interface GeneralSettings {
    /**
     * 
     * @type {number}
     * @memberof GeneralSettings
     */
    'pageSize'?: number | null;
}
/**
 * 
 * @export
 * @interface IdentityError
 */
export interface IdentityError {
    /**
     * 
     * @type {string}
     * @memberof IdentityError
     */
    'code'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof IdentityError
     */
    'description'?: string | null;
}
/**
 * 
 * @export
 * @interface JobAddOrUpdateModel
 */
export interface JobAddOrUpdateModel {
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'jobName': string;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'jobGroup': string;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'cronExpression': string;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'package': string;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'parameters'?: string | null;
}
/**
 * 
 * @export
 * @interface JobDetailModel
 */
export interface JobDetailModel {
    /**
     * 
     * @type {string}
     * @memberof JobDetailModel
     */
    'jobName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobDetailModel
     */
    'jobGroup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobDetailModel
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobDetailModel
     */
    'cronExpression'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobDetailModel
     */
    'package'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobDetailModel
     */
    'parameters'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobDetailModel
     */
    'cronExpressionDescription'?: string | null;
}
/**
 * 
 * @export
 * @interface JobExecutionDetail
 */
export interface JobExecutionDetail {
    /**
     * 
     * @type {string}
     * @memberof JobExecutionDetail
     */
    'instanceName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionDetail
     */
    'jobName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionDetail
     */
    'jobGroup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionDetail
     */
    'triggerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionDetail
     */
    'triggerGroup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionDetail
     */
    'packageName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionDetail
     */
    'scheduledTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionDetail
     */
    'firedTime'?: string;
    /**
     * 
     * @type {TimeSpan}
     * @memberof JobExecutionDetail
     */
    'runTime'?: TimeSpan;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionDetail
     */
    'hasError'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionDetail
     */
    'errorMessage'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionDetail
     */
    'completed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionDetail
     */
    'vetoed'?: boolean;
}
/**
 * 
 * @export
 * @interface JobExecutionDetailModel
 */
export interface JobExecutionDetailModel {
    /**
     * 
     * @type {JobExecutionDetail}
     * @memberof JobExecutionDetailModel
     */
    'details'?: JobExecutionDetail;
    /**
     * 
     * @type {Array<AttachmentInfoModel>}
     * @memberof JobExecutionDetailModel
     */
    'attachments'?: Array<AttachmentInfoModel> | null;
    /**
     * 
     * @type {Array<LogLine>}
     * @memberof JobExecutionDetailModel
     */
    'logs'?: Array<LogLine> | null;
}
/**
 * 
 * @export
 * @interface JobExecutionHistory
 */
export interface JobExecutionHistory {
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'jobName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'jobGroup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'triggerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'triggerGroup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'scheduledTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'firedTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'lastSignalTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'nextFireTime'?: string | null;
    /**
     * 
     * @type {TimeSpan}
     * @memberof JobExecutionHistory
     */
    'runTime'?: TimeSpan;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionHistory
     */
    'hasError'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionHistory
     */
    'completed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionHistory
     */
    'vetoed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionHistory
     */
    'hasSignalTimeout'?: boolean;
}
/**
 * 
 * @export
 * @interface JobExecutionHistoryPagedResult
 */
export interface JobExecutionHistoryPagedResult {
    /**
     * 
     * @type {number}
     * @memberof JobExecutionHistoryPagedResult
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobExecutionHistoryPagedResult
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<JobExecutionHistory>}
     * @memberof JobExecutionHistoryPagedResult
     */
    'items'?: Array<JobExecutionHistory> | null;
    /**
     * 
     * @type {number}
     * @memberof JobExecutionHistoryPagedResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobExecutionHistoryPagedResult
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface JobListItemModel
 */
export interface JobListItemModel {
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'jobName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'jobGroup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'jobType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'lastFireTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'nextFireTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'triggerDescription'?: string | null;
}
/**
 * 
 * @export
 * @interface JobListItemModelPagedResult
 */
export interface JobListItemModelPagedResult {
    /**
     * 
     * @type {number}
     * @memberof JobListItemModelPagedResult
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobListItemModelPagedResult
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<JobListItemModel>}
     * @memberof JobListItemModelPagedResult
     */
    'items'?: Array<JobListItemModel> | null;
    /**
     * 
     * @type {number}
     * @memberof JobListItemModelPagedResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobListItemModelPagedResult
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface LogLine
 */
export interface LogLine {
    /**
     * 
     * @type {boolean}
     * @memberof LogLine
     */
    'isError'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof LogLine
     */
    'message'?: string | null;
}
/**
 * 
 * @export
 * @interface LoginModel
 */
export interface LoginModel {
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LoginModel
     */
    'password'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof LoginModel
     */
    'rememberMe'?: boolean;
}
/**
 * 
 * @export
 * @interface PackageDetailsModel
 */
export interface PackageDetailsModel {
    /**
     * 
     * @type {string}
     * @memberof PackageDetailsModel
     */
    'name'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PackageDetailsModel
     */
    'path'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PackageDetailsModel
     */
    'modifyDate'?: string | null;
}
/**
 * 
 * @export
 * @interface ProblemDetails
 */
export interface ProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ProblemDetails
     */
    'instance'?: string | null;
}
/**
 * 
 * @export
 * @interface SchedulerInfoModel
 */
export interface SchedulerInfoModel {
    /**
     * 
     * @type {SchedulerMetadataModel}
     * @memberof SchedulerInfoModel
     */
    'metadata'?: SchedulerMetadataModel;
    /**
     * 
     * @type {Array<SchedulerStateRecordModel>}
     * @memberof SchedulerInfoModel
     */
    'nodes'?: Array<SchedulerStateRecordModel> | null;
    /**
     * 
     * @type {SchedulerJobExecutionStatisticsModel}
     * @memberof SchedulerInfoModel
     */
    'statistics'?: SchedulerJobExecutionStatisticsModel;
}
/**
 * 
 * @export
 * @interface SchedulerJobExecutionStatisticsModel
 */
export interface SchedulerJobExecutionStatisticsModel {
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalExecutedJobs'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalSucceededJobs'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalRunningJobs'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalFailedJobs'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalVetoedJobs'?: number;
}
/**
 * 
 * @export
 * @interface SchedulerMetadataModel
 */
export interface SchedulerMetadataModel {
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'schedulerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'schedulerInstanceId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'schedulerType'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'schedulerRemote'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'started'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'inStandbyMode'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'shutdown'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'jobStoreType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'threadPoolType'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SchedulerMetadataModel
     */
    'threadPoolSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'summary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'runningSince'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'jobStoreClustered'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'jobStoreSupportsPersistence'?: boolean;
}
/**
 * 
 * @export
 * @interface SchedulerStateRecordModel
 */
export interface SchedulerStateRecordModel {
    /**
     * 
     * @type {TimeSpan}
     * @memberof SchedulerStateRecordModel
     */
    'checkInInterval'?: TimeSpan;
    /**
     * 
     * @type {string}
     * @memberof SchedulerStateRecordModel
     */
    'checkInTimestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchedulerStateRecordModel
     */
    'schedulerInstanceId'?: string | null;
}
/**
 * 
 * @export
 * @interface SignInResult
 */
export interface SignInResult {
    /**
     * 
     * @type {boolean}
     * @memberof SignInResult
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SignInResult
     */
    'isLockedOut'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SignInResult
     */
    'isNotAllowed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SignInResult
     */
    'requiresTwoFactor'?: boolean;
}
/**
 * 
 * @export
 * @interface SmtpSettings
 */
export interface SmtpSettings {
    /**
     * 
     * @type {string}
     * @memberof SmtpSettings
     */
    'host'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SmtpSettings
     */
    'port'?: number;
    /**
     * 
     * @type {string}
     * @memberof SmtpSettings
     */
    'from'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SmtpSettings
     */
    'fromName'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SmtpSettings
     */
    'enableSsl'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SmtpSettings
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SmtpSettings
     */
    'password'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SmtpSettings
     */
    'domain'?: string | null;
}
/**
 * 
 * @export
 * @interface TimeSpan
 */
export interface TimeSpan {
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'ticks'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'days'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'milliseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'microseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'nanoseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'minutes'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'seconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalDays'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalMilliseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalMicroseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalNanoseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalMinutes'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalSeconds'?: number;
}
/**
 * 
 * @export
 * @interface UserAddOrUpdateModel
 */
export interface UserAddOrUpdateModel {
    /**
     * 
     * @type {number}
     * @memberof UserAddOrUpdateModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserAddOrUpdateModel
     */
    'userName': string;
    /**
     * 
     * @type {string}
     * @memberof UserAddOrUpdateModel
     */
    'password'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserAddOrUpdateModel
     */
    'roles'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface UserAddOrUpdateResultModel
 */
export interface UserAddOrUpdateResultModel {
    /**
     * 
     * @type {number}
     * @memberof UserAddOrUpdateResultModel
     */
    'userId'?: number;
    /**
     * 
     * @type {boolean}
     * @memberof UserAddOrUpdateResultModel
     */
    'succeeded'?: boolean;
    /**
     * 
     * @type {Array<IdentityError>}
     * @memberof UserAddOrUpdateResultModel
     */
    'errors'?: Array<IdentityError> | null;
}
/**
 * 
 * @export
 * @interface UserDetailModel
 */
export interface UserDetailModel {
    /**
     * 
     * @type {string}
     * @memberof UserDetailModel
     */
    'userName'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserDetailModel
     */
    'roles'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface UserListItemModel
 */
export interface UserListItemModel {
    /**
     * 
     * @type {number}
     * @memberof UserListItemModel
     */
    'id'?: number;
    /**
     * 
     * @type {string}
     * @memberof UserListItemModel
     */
    'userName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserListItemModel
     */
    'roles'?: string | null;
}
/**
 * 
 * @export
 * @interface UserListItemModelPagedResult
 */
export interface UserListItemModelPagedResult {
    /**
     * 
     * @type {number}
     * @memberof UserListItemModelPagedResult
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserListItemModelPagedResult
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<UserListItemModel>}
     * @memberof UserListItemModelPagedResult
     */
    'items'?: Array<UserListItemModel> | null;
    /**
     * 
     * @type {number}
     * @memberof UserListItemModelPagedResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof UserListItemModelPagedResult
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface UserModel
 */
export interface UserModel {
    /**
     * 
     * @type {string}
     * @memberof UserModel
     */
    'userName'?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof UserModel
     */
    'roles'?: Array<string> | null;
}
/**
 * 
 * @export
 * @interface ValidationProblemDetails
 */
export interface ValidationProblemDetails {
    [key: string]: any;

    /**
     * 
     * @type {string}
     * @memberof ValidationProblemDetails
     */
    'type'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ValidationProblemDetails
     */
    'title'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ValidationProblemDetails
     */
    'status'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof ValidationProblemDetails
     */
    'detail'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof ValidationProblemDetails
     */
    'instance'?: string | null;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ValidationProblemDetails
     */
    'errors'?: { [key: string]: Array<string>; } | null;
}

/**
 * AuthApi - axios parameter creator
 * @export
 */
export const AuthApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGetUserGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/GetUser`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (loginModel?: LoginModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Auth/Logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AuthApi - functional programming interface
 * @export
 */
export const AuthApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AuthApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthGetUserGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthGetUserGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(loginModel?: LoginModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SignInResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(loginModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AuthApi - factory interface
 * @export
 */
export const AuthApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AuthApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthGetUserGet(options?: any): AxiosPromise<UserModel> {
            return localVarFp.apiAuthGetUserGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {LoginModel} [loginModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(loginModel?: LoginModel, options?: any): AxiosPromise<SignInResult> {
            return localVarFp.apiAuthLoginPost(loginModel, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthLogoutPost(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AuthApi - object-oriented interface
 * @export
 * @class AuthApi
 * @extends {BaseAPI}
 */
export class AuthApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthGetUserGet(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthGetUserGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {LoginModel} [loginModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLoginPost(loginModel?: LoginModel, options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLoginPost(loginModel, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AuthApi
     */
    public apiAuthLogoutPost(options?: AxiosRequestConfig) {
        return AuthApiFp(this.configuration).apiAuthLogoutPost(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobExecutionDetailsApi - axios parameter creator
 * @export
 */
export const JobExecutionDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {string} [attachmentName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsGetAttachmentIdGet: async (id: number, attachmentName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobExecutionDetailsGetAttachmentIdGet', 'id', id)
            const localVarPath = `/api/JobExecutionDetails/GetAttachment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (attachmentName !== undefined) {
                localVarQueryParameter['attachmentName'] = attachmentName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsGetErrorDetailIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobExecutionDetailsGetErrorDetailIdGet', 'id', id)
            const localVarPath = `/api/JobExecutionDetails/GetErrorDetail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobExecutionDetailsIdGet', 'id', id)
            const localVarPath = `/api/JobExecutionDetails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobExecutionDetailsApi - functional programming interface
 * @export
 */
export const JobExecutionDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobExecutionDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {string} [attachmentName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobExecutionDetailsGetAttachmentIdGet(id: number, attachmentName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobExecutionDetailsGetAttachmentIdGet(id, attachmentName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobExecutionDetailsGetErrorDetailIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobExecutionDetailsGetErrorDetailIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobExecutionDetailsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobExecutionDetailModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobExecutionDetailsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobExecutionDetailsApi - factory interface
 * @export
 */
export const JobExecutionDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobExecutionDetailsApiFp(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {string} [attachmentName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsGetAttachmentIdGet(id: number, attachmentName?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiJobExecutionDetailsGetAttachmentIdGet(id, attachmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsGetErrorDetailIdGet(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiJobExecutionDetailsGetErrorDetailIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsIdGet(id: string, options?: any): AxiosPromise<JobExecutionDetailModel> {
            return localVarFp.apiJobExecutionDetailsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobExecutionDetailsApi - object-oriented interface
 * @export
 * @class JobExecutionDetailsApi
 * @extends {BaseAPI}
 */
export class JobExecutionDetailsApi extends BaseAPI {
    /**
     * 
     * @param {number} id 
     * @param {string} [attachmentName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobExecutionDetailsApi
     */
    public apiJobExecutionDetailsGetAttachmentIdGet(id: number, attachmentName?: string, options?: AxiosRequestConfig) {
        return JobExecutionDetailsApiFp(this.configuration).apiJobExecutionDetailsGetAttachmentIdGet(id, attachmentName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobExecutionDetailsApi
     */
    public apiJobExecutionDetailsGetErrorDetailIdGet(id: string, options?: AxiosRequestConfig) {
        return JobExecutionDetailsApiFp(this.configuration).apiJobExecutionDetailsGetErrorDetailIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobExecutionDetailsApi
     */
    public apiJobExecutionDetailsIdGet(id: string, options?: AxiosRequestConfig) {
        return JobExecutionDetailsApiFp(this.configuration).apiJobExecutionDetailsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobHistoryApi - axios parameter creator
 * @export
 */
export const JobHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} pageNumber 
         * @param {string} [jobName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobHistoryPageNumberGet: async (pageNumber: number, jobName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('apiJobHistoryPageNumberGet', 'pageNumber', pageNumber)
            const localVarPath = `/api/JobHistory/{pageNumber}`
                .replace(`{${"pageNumber"}}`, encodeURIComponent(String(pageNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (jobName !== undefined) {
                localVarQueryParameter['jobName'] = jobName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobHistoryApi - functional programming interface
 * @export
 */
export const JobHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} pageNumber 
         * @param {string} [jobName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobHistoryPageNumberGet(pageNumber: number, jobName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobExecutionHistoryPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobHistoryPageNumberGet(pageNumber, jobName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobHistoryApi - factory interface
 * @export
 */
export const JobHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobHistoryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} pageNumber 
         * @param {string} [jobName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobHistoryPageNumberGet(pageNumber: number, jobName?: string, options?: any): AxiosPromise<JobExecutionHistoryPagedResult> {
            return localVarFp.apiJobHistoryPageNumberGet(pageNumber, jobName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobHistoryApi - object-oriented interface
 * @export
 * @class JobHistoryApi
 * @extends {BaseAPI}
 */
export class JobHistoryApi extends BaseAPI {
    /**
     * 
     * @param {number} pageNumber 
     * @param {string} [jobName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobHistoryApi
     */
    public apiJobHistoryPageNumberGet(pageNumber: number, jobName?: string, options?: AxiosRequestConfig) {
        return JobHistoryApiFp(this.configuration).apiJobHistoryPageNumberGet(pageNumber, jobName, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} group 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGroupNameGet: async (group: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            assertParamExists('apiJobsGroupNameGet', 'group', group)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiJobsGroupNameGet', 'name', name)
            const localVarPath = `/api/Jobs/{group}/{name}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pageNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPageNumberGet: async (pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('apiJobsPageNumberGet', 'pageNumber', pageNumber)
            const localVarPath = `/api/Jobs/{pageNumber}`
                .replace(`{${"pageNumber"}}`, encodeURIComponent(String(pageNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JobAddOrUpdateModel} [jobAddOrUpdateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPost: async (jobAddOrUpdateModel?: JobAddOrUpdateModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAddOrUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} group 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsGroupNameGet(group: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobDetailModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsGroupNameGet(group, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pageNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsPageNumberGet(pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobListItemModelPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsPageNumberGet(pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JobAddOrUpdateModel} [jobAddOrUpdateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsPost(jobAddOrUpdateModel?: JobAddOrUpdateModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsPost(jobAddOrUpdateModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} group 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGroupNameGet(group: string, name: string, options?: any): AxiosPromise<JobDetailModel> {
            return localVarFp.apiJobsGroupNameGet(group, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pageNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPageNumberGet(pageNumber: number, options?: any): AxiosPromise<JobListItemModelPagedResult> {
            return localVarFp.apiJobsPageNumberGet(pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JobAddOrUpdateModel} [jobAddOrUpdateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPost(jobAddOrUpdateModel?: JobAddOrUpdateModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiJobsPost(jobAddOrUpdateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @param {string} group 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public apiJobsGroupNameGet(group: string, name: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).apiJobsGroupNameGet(group, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} pageNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public apiJobsPageNumberGet(pageNumber: number, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).apiJobsPageNumberGet(pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JobAddOrUpdateModel} [jobAddOrUpdateModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public apiJobsPost(jobAddOrUpdateModel?: JobAddOrUpdateModel, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).apiJobsPost(jobAddOrUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PackagesApi - axios parameter creator
 * @export
 */
export const PackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} [packageName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackagesDetailGet: async (packageName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Packages/Detail`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackagesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Packages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} name 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackagesSavePost: async (name: string, file: File, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiPackagesSavePost', 'name', name)
            // verify required parameter 'file' is not null or undefined
            assertParamExists('apiPackagesSavePost', 'file', file)
            const localVarPath = `/api/Packages/Save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (name !== undefined) { 
                localVarFormParams.append('Name', name as any);
            }
    
            if (file !== undefined) { 
                localVarFormParams.append('File', file as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackagesApi - functional programming interface
 * @export
 */
export const PackagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PackagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} [packageName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPackagesDetailGet(packageName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PackageDetailsModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPackagesDetailGet(packageName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPackagesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPackagesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} name 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPackagesSavePost(name: string, file: File, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPackagesSavePost(name, file, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PackagesApi - factory interface
 * @export
 */
export const PackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PackagesApiFp(configuration)
    return {
        /**
         * 
         * @param {string} [packageName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackagesDetailGet(packageName?: string, options?: any): AxiosPromise<PackageDetailsModel> {
            return localVarFp.apiPackagesDetailGet(packageName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackagesGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiPackagesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} name 
         * @param {File} file 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackagesSavePost(name: string, file: File, options?: any): AxiosPromise<void> {
            return localVarFp.apiPackagesSavePost(name, file, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PackagesApi - object-oriented interface
 * @export
 * @class PackagesApi
 * @extends {BaseAPI}
 */
export class PackagesApi extends BaseAPI {
    /**
     * 
     * @param {string} [packageName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public apiPackagesDetailGet(packageName?: string, options?: AxiosRequestConfig) {
        return PackagesApiFp(this.configuration).apiPackagesDetailGet(packageName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public apiPackagesGet(options?: AxiosRequestConfig) {
        return PackagesApiFp(this.configuration).apiPackagesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} name 
     * @param {File} file 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public apiPackagesSavePost(name: string, file: File, options?: AxiosRequestConfig) {
        return PackagesApiFp(this.configuration).apiPackagesSavePost(name, file, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchedulerApi - axios parameter creator
 * @export
 */
export const SchedulerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchedulerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Scheduler`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchedulerApi - functional programming interface
 * @export
 */
export const SchedulerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchedulerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchedulerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulerInfoModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSchedulerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchedulerApi - factory interface
 * @export
 */
export const SchedulerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchedulerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchedulerGet(options?: any): AxiosPromise<SchedulerInfoModel> {
            return localVarFp.apiSchedulerGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchedulerApi - object-oriented interface
 * @export
 * @class SchedulerApi
 * @extends {BaseAPI}
 */
export class SchedulerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulerApi
     */
    public apiSchedulerGet(options?: AxiosRequestConfig) {
        return SchedulerApiFp(this.configuration).apiSchedulerGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SettingsApi - axios parameter creator
 * @export
 */
export const SettingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsGetGeneralSettingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Settings/GetGeneralSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsGetSmtpSettingsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Settings/GetSmtpSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {GeneralSettings} [generalSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsSaveGeneralSettingsPost: async (generalSettings?: GeneralSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Settings/SaveGeneralSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(generalSettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SmtpSettings} [smtpSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsSaveSmtpSettingsPost: async (smtpSettings?: SmtpSettings, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Settings/SaveSmtpSettings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(smtpSettings, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SettingsApi - functional programming interface
 * @export
 */
export const SettingsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SettingsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingsGetGeneralSettingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GeneralSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingsGetGeneralSettingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingsGetSmtpSettingsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SmtpSettings>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingsGetSmtpSettingsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {GeneralSettings} [generalSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingsSaveGeneralSettingsPost(generalSettings?: GeneralSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingsSaveGeneralSettingsPost(generalSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {SmtpSettings} [smtpSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSettingsSaveSmtpSettingsPost(smtpSettings?: SmtpSettings, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSettingsSaveSmtpSettingsPost(smtpSettings, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SettingsApi - factory interface
 * @export
 */
export const SettingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SettingsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsGetGeneralSettingsGet(options?: any): AxiosPromise<GeneralSettings> {
            return localVarFp.apiSettingsGetGeneralSettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsGetSmtpSettingsGet(options?: any): AxiosPromise<SmtpSettings> {
            return localVarFp.apiSettingsGetSmtpSettingsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {GeneralSettings} [generalSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsSaveGeneralSettingsPost(generalSettings?: GeneralSettings, options?: any): AxiosPromise<void> {
            return localVarFp.apiSettingsSaveGeneralSettingsPost(generalSettings, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SmtpSettings} [smtpSettings] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSettingsSaveSmtpSettingsPost(smtpSettings?: SmtpSettings, options?: any): AxiosPromise<void> {
            return localVarFp.apiSettingsSaveSmtpSettingsPost(smtpSettings, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SettingsApi - object-oriented interface
 * @export
 * @class SettingsApi
 * @extends {BaseAPI}
 */
export class SettingsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiSettingsGetGeneralSettingsGet(options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiSettingsGetGeneralSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiSettingsGetSmtpSettingsGet(options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiSettingsGetSmtpSettingsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {GeneralSettings} [generalSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiSettingsSaveGeneralSettingsPost(generalSettings?: GeneralSettings, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiSettingsSaveGeneralSettingsPost(generalSettings, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SmtpSettings} [smtpSettings] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SettingsApi
     */
    public apiSettingsSaveSmtpSettingsPost(smtpSettings?: SmtpSettings, options?: AxiosRequestConfig) {
        return SettingsApiFp(this.configuration).apiSettingsSaveSmtpSettingsPost(smtpSettings, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGetRolesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users/GetRoles`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGetUserUserIdGet: async (userId: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'userId' is not null or undefined
            assertParamExists('apiUsersGetUserUserIdGet', 'userId', userId)
            const localVarPath = `/api/Users/GetUser/{userId}`
                .replace(`{${"userId"}}`, encodeURIComponent(String(userId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} pageNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPageNumberGet: async (pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('apiUsersPageNumberGet', 'pageNumber', pageNumber)
            const localVarPath = `/api/Users/{pageNumber}`
                .replace(`{${"pageNumber"}}`, encodeURIComponent(String(pageNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserAddOrUpdateModel} [userAddOrUpdateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost: async (userAddOrUpdateModel?: UserAddOrUpdateModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(userAddOrUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGetRolesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGetRolesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersGetUserUserIdGet(userId: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserDetailModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersGetUserUserIdGet(userId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} pageNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPageNumberGet(pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserListItemModelPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPageNumberGet(pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {UserAddOrUpdateModel} [userAddOrUpdateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiUsersPost(userAddOrUpdateModel?: UserAddOrUpdateModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserAddOrUpdateResultModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiUsersPost(userAddOrUpdateModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGetRolesGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiUsersGetRolesGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} userId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersGetUserUserIdGet(userId: number, options?: any): AxiosPromise<UserDetailModel> {
            return localVarFp.apiUsersGetUserUserIdGet(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} pageNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPageNumberGet(pageNumber: number, options?: any): AxiosPromise<UserListItemModelPagedResult> {
            return localVarFp.apiUsersPageNumberGet(pageNumber, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {UserAddOrUpdateModel} [userAddOrUpdateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiUsersPost(userAddOrUpdateModel?: UserAddOrUpdateModel, options?: any): AxiosPromise<UserAddOrUpdateResultModel> {
            return localVarFp.apiUsersPost(userAddOrUpdateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersGetRolesGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersGetRolesGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} userId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersGetUserUserIdGet(userId: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersGetUserUserIdGet(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} pageNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersPageNumberGet(pageNumber: number, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersPageNumberGet(pageNumber, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {UserAddOrUpdateModel} [userAddOrUpdateModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public apiUsersPost(userAddOrUpdateModel?: UserAddOrUpdateModel, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).apiUsersPost(userAddOrUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


