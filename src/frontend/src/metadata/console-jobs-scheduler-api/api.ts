/* tslint:disable */
/* eslint-disable */
/**
 * ConsoleJobScheduler.WindowsService
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface JobAddOrUpdateModel
 */
export interface JobAddOrUpdateModel {
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'jobName': string;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'jobGroup': string;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'description'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'cronExpression': string;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'package': string;
    /**
     * 
     * @type {string}
     * @memberof JobAddOrUpdateModel
     */
    'parameters'?: string | null;
}
/**
 * 
 * @export
 * @interface JobExecutionHistory
 */
export interface JobExecutionHistory {
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'id'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'jobName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'jobGroup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'triggerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'triggerGroup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'scheduledTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'firedTime'?: string;
    /**
     * 
     * @type {string}
     * @memberof JobExecutionHistory
     */
    'nextFireTime'?: string | null;
    /**
     * 
     * @type {TimeSpan}
     * @memberof JobExecutionHistory
     */
    'runTime'?: TimeSpan;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionHistory
     */
    'hasError'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionHistory
     */
    'completed'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof JobExecutionHistory
     */
    'vetoed'?: boolean;
}
/**
 * 
 * @export
 * @interface JobExecutionHistoryPagedResult
 */
export interface JobExecutionHistoryPagedResult {
    /**
     * 
     * @type {number}
     * @memberof JobExecutionHistoryPagedResult
     */
    'page'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobExecutionHistoryPagedResult
     */
    'totalCount'?: number;
    /**
     * 
     * @type {Array<JobExecutionHistory>}
     * @memberof JobExecutionHistoryPagedResult
     */
    'items'?: Array<JobExecutionHistory> | null;
    /**
     * 
     * @type {number}
     * @memberof JobExecutionHistoryPagedResult
     */
    'pageSize'?: number;
    /**
     * 
     * @type {number}
     * @memberof JobExecutionHistoryPagedResult
     */
    'totalPages'?: number;
}
/**
 * 
 * @export
 * @interface JobListItemModel
 */
export interface JobListItemModel {
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'jobName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'jobGroup'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'jobType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'lastFireTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'nextFireTime'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof JobListItemModel
     */
    'triggerDescription'?: string | null;
}
/**
 * 
 * @export
 * @interface SchedulerInfoModel
 */
export interface SchedulerInfoModel {
    /**
     * 
     * @type {SchedulerMetadataModel}
     * @memberof SchedulerInfoModel
     */
    'metadata'?: SchedulerMetadataModel;
    /**
     * 
     * @type {Array<SchedulerStateRecordModel>}
     * @memberof SchedulerInfoModel
     */
    'nodes'?: Array<SchedulerStateRecordModel> | null;
    /**
     * 
     * @type {SchedulerJobExecutionStatisticsModel}
     * @memberof SchedulerInfoModel
     */
    'statistics'?: SchedulerJobExecutionStatisticsModel;
}
/**
 * 
 * @export
 * @interface SchedulerJobExecutionStatisticsModel
 */
export interface SchedulerJobExecutionStatisticsModel {
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalExecutedJobs'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalSucceededJobs'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalRunningJobs'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalFailedJobs'?: number;
    /**
     * 
     * @type {number}
     * @memberof SchedulerJobExecutionStatisticsModel
     */
    'totalVetoedJobs'?: number;
}
/**
 * 
 * @export
 * @interface SchedulerMetadataModel
 */
export interface SchedulerMetadataModel {
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'schedulerName'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'schedulerInstanceId'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'schedulerType'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'schedulerRemote'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'started'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'inStandbyMode'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'shutdown'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'jobStoreType'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'threadPoolType'?: string | null;
    /**
     * 
     * @type {number}
     * @memberof SchedulerMetadataModel
     */
    'threadPoolSize'?: number;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'version'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'summary'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SchedulerMetadataModel
     */
    'runningSince'?: string | null;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'jobStoreClustered'?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof SchedulerMetadataModel
     */
    'jobStoreSupportsPersistence'?: boolean;
}
/**
 * 
 * @export
 * @interface SchedulerStateRecordModel
 */
export interface SchedulerStateRecordModel {
    /**
     * 
     * @type {TimeSpan}
     * @memberof SchedulerStateRecordModel
     */
    'checkInInterval'?: TimeSpan;
    /**
     * 
     * @type {string}
     * @memberof SchedulerStateRecordModel
     */
    'checkInTimestamp'?: string;
    /**
     * 
     * @type {string}
     * @memberof SchedulerStateRecordModel
     */
    'schedulerInstanceId'?: string | null;
}
/**
 * 
 * @export
 * @interface TimeSpan
 */
export interface TimeSpan {
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'ticks'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'days'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'hours'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'milliseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'microseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'nanoseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'minutes'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'seconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalDays'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalHours'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalMilliseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalMicroseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalNanoseconds'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalMinutes'?: number;
    /**
     * 
     * @type {number}
     * @memberof TimeSpan
     */
    'totalSeconds'?: number;
}

/**
 * JobExecutionDetailsApi - axios parameter creator
 * @export
 */
export const JobExecutionDetailsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [packageName] 
         * @param {string} [attachmentName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsGetAttachmentIdGet: async (id: string, packageName?: string, attachmentName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobExecutionDetailsGetAttachmentIdGet', 'id', id)
            const localVarPath = `/api/JobExecutionDetails/GetAttachment/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (packageName !== undefined) {
                localVarQueryParameter['packageName'] = packageName;
            }

            if (attachmentName !== undefined) {
                localVarQueryParameter['attachmentName'] = attachmentName;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsGetErrorDetailIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobExecutionDetailsGetErrorDetailIdGet', 'id', id)
            const localVarPath = `/api/JobExecutionDetails/GetErrorDetail/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('apiJobExecutionDetailsIdGet', 'id', id)
            const localVarPath = `/api/JobExecutionDetails/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobExecutionDetailsApi - functional programming interface
 * @export
 */
export const JobExecutionDetailsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobExecutionDetailsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [packageName] 
         * @param {string} [attachmentName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobExecutionDetailsGetAttachmentIdGet(id: string, packageName?: string, attachmentName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobExecutionDetailsGetAttachmentIdGet(id, packageName, attachmentName, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobExecutionDetailsGetErrorDetailIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobExecutionDetailsGetErrorDetailIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobExecutionDetailsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobExecutionDetailsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobExecutionDetailsApi - factory interface
 * @export
 */
export const JobExecutionDetailsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobExecutionDetailsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {string} [packageName] 
         * @param {string} [attachmentName] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsGetAttachmentIdGet(id: string, packageName?: string, attachmentName?: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiJobExecutionDetailsGetAttachmentIdGet(id, packageName, attachmentName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsGetErrorDetailIdGet(id: string, options?: any): AxiosPromise<string> {
            return localVarFp.apiJobExecutionDetailsGetErrorDetailIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobExecutionDetailsIdGet(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiJobExecutionDetailsIdGet(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobExecutionDetailsApi - object-oriented interface
 * @export
 * @class JobExecutionDetailsApi
 * @extends {BaseAPI}
 */
export class JobExecutionDetailsApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {string} [packageName] 
     * @param {string} [attachmentName] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobExecutionDetailsApi
     */
    public apiJobExecutionDetailsGetAttachmentIdGet(id: string, packageName?: string, attachmentName?: string, options?: AxiosRequestConfig) {
        return JobExecutionDetailsApiFp(this.configuration).apiJobExecutionDetailsGetAttachmentIdGet(id, packageName, attachmentName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobExecutionDetailsApi
     */
    public apiJobExecutionDetailsGetErrorDetailIdGet(id: string, options?: AxiosRequestConfig) {
        return JobExecutionDetailsApiFp(this.configuration).apiJobExecutionDetailsGetErrorDetailIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobExecutionDetailsApi
     */
    public apiJobExecutionDetailsIdGet(id: string, options?: AxiosRequestConfig) {
        return JobExecutionDetailsApiFp(this.configuration).apiJobExecutionDetailsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobHistoryApi - axios parameter creator
 * @export
 */
export const JobHistoryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} pageNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobHistoryPageNumberGet: async (pageNumber: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'pageNumber' is not null or undefined
            assertParamExists('apiJobHistoryPageNumberGet', 'pageNumber', pageNumber)
            const localVarPath = `/api/JobHistory/{pageNumber}`
                .replace(`{${"pageNumber"}}`, encodeURIComponent(String(pageNumber)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobHistoryApi - functional programming interface
 * @export
 */
export const JobHistoryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobHistoryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} pageNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobHistoryPageNumberGet(pageNumber: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<JobExecutionHistoryPagedResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobHistoryPageNumberGet(pageNumber, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobHistoryApi - factory interface
 * @export
 */
export const JobHistoryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobHistoryApiFp(configuration)
    return {
        /**
         * 
         * @param {number} pageNumber 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobHistoryPageNumberGet(pageNumber: number, options?: any): AxiosPromise<JobExecutionHistoryPagedResult> {
            return localVarFp.apiJobHistoryPageNumberGet(pageNumber, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobHistoryApi - object-oriented interface
 * @export
 * @class JobHistoryApi
 * @extends {BaseAPI}
 */
export class JobHistoryApi extends BaseAPI {
    /**
     * 
     * @param {number} pageNumber 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobHistoryApi
     */
    public apiJobHistoryPageNumberGet(pageNumber: number, options?: AxiosRequestConfig) {
        return JobHistoryApiFp(this.configuration).apiJobHistoryPageNumberGet(pageNumber, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * JobsApi - axios parameter creator
 * @export
 */
export const JobsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} group 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGroupNameGet: async (group: string, name: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'group' is not null or undefined
            assertParamExists('apiJobsGroupNameGet', 'group', group)
            // verify required parameter 'name' is not null or undefined
            assertParamExists('apiJobsGroupNameGet', 'name', name)
            const localVarPath = `/api/Jobs/{group}/{name}`
                .replace(`{${"group"}}`, encodeURIComponent(String(group)))
                .replace(`{${"name"}}`, encodeURIComponent(String(name)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {JobAddOrUpdateModel} [jobAddOrUpdateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPost: async (jobAddOrUpdateModel?: JobAddOrUpdateModel, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Jobs`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(jobAddOrUpdateModel, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * JobsApi - functional programming interface
 * @export
 */
export const JobsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = JobsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<JobListItemModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} group 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsGroupNameGet(group: string, name: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsGroupNameGet(group, name, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {JobAddOrUpdateModel} [jobAddOrUpdateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiJobsPost(jobAddOrUpdateModel?: JobAddOrUpdateModel, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiJobsPost(jobAddOrUpdateModel, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * JobsApi - factory interface
 * @export
 */
export const JobsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = JobsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGet(options?: any): AxiosPromise<Array<JobListItemModel>> {
            return localVarFp.apiJobsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} group 
         * @param {string} name 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsGroupNameGet(group: string, name: string, options?: any): AxiosPromise<void> {
            return localVarFp.apiJobsGroupNameGet(group, name, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {JobAddOrUpdateModel} [jobAddOrUpdateModel] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiJobsPost(jobAddOrUpdateModel?: JobAddOrUpdateModel, options?: any): AxiosPromise<void> {
            return localVarFp.apiJobsPost(jobAddOrUpdateModel, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * JobsApi - object-oriented interface
 * @export
 * @class JobsApi
 * @extends {BaseAPI}
 */
export class JobsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public apiJobsGet(options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).apiJobsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} group 
     * @param {string} name 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public apiJobsGroupNameGet(group: string, name: string, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).apiJobsGroupNameGet(group, name, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {JobAddOrUpdateModel} [jobAddOrUpdateModel] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof JobsApi
     */
    public apiJobsPost(jobAddOrUpdateModel?: JobAddOrUpdateModel, options?: AxiosRequestConfig) {
        return JobsApiFp(this.configuration).apiJobsPost(jobAddOrUpdateModel, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PackagesApi - axios parameter creator
 * @export
 */
export const PackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackagesGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Packages`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackagesApi - functional programming interface
 * @export
 */
export const PackagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PackagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiPackagesGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiPackagesGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PackagesApi - factory interface
 * @export
 */
export const PackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PackagesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiPackagesGet(options?: any): AxiosPromise<Array<string>> {
            return localVarFp.apiPackagesGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PackagesApi - object-oriented interface
 * @export
 * @class PackagesApi
 * @extends {BaseAPI}
 */
export class PackagesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public apiPackagesGet(options?: AxiosRequestConfig) {
        return PackagesApiFp(this.configuration).apiPackagesGet(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * SchedulerApi - axios parameter creator
 * @export
 */
export const SchedulerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchedulerGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/Scheduler`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SchedulerApi - functional programming interface
 * @export
 */
export const SchedulerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = SchedulerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchedulerGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SchedulerInfoModel>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSchedulerGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * SchedulerApi - factory interface
 * @export
 */
export const SchedulerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = SchedulerApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchedulerGet(options?: any): AxiosPromise<SchedulerInfoModel> {
            return localVarFp.apiSchedulerGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SchedulerApi - object-oriented interface
 * @export
 * @class SchedulerApi
 * @extends {BaseAPI}
 */
export class SchedulerApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SchedulerApi
     */
    public apiSchedulerGet(options?: AxiosRequestConfig) {
        return SchedulerApiFp(this.configuration).apiSchedulerGet(options).then((request) => request(this.axios, this.basePath));
    }
}


